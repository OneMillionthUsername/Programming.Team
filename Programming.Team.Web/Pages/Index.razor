@page "/"
@inherits ReactiveInjectableComponentBase<IndexViewModel>
@attribute [AllowAnonymous]


@if (ViewModel != null)
{
    <MudElement Class="d-flex flex-column flex-grow-1" Width="100%">
        <MudImage ObjectFit="ObjectFit.Cover" Height="200" Src="images/logo.png" Alt="Logo of Programming.Team"
            Elevation="25" Class="rounded-lg" />
        <MudText Class="z-0 mt-4 display1" Typo="Typo.h4" GutterBottom="true">Programming.Team</MudText>
        <MudText Class="mb-8" Typo="Typo.h6">The Resume Tailor</MudText>

        <MudText Typo="Typo.body1">
            This application offers a specialized resume-tailoring experience that aligns your skills and
            experiences with specific job descriptions. To achieve the best results, users should input their
            work histories and relevant skills in detail. The system will then generate a skills matrix
            highlighting those capabilities mentioned in the target job description, and produce a
            position-focused summary tailored for the role in question.
            <br />
            <h4 Class="mt-8">Key features include:</h4>
            <ul Class="mb-8">
                <li class="ml-4">
                    Free Usage and Pricing: The first 15 tailored resume generations are free upon signup.
                    After
                    that, packages start at USD $7.99 for 25 additional resume generations.
                </li>
                <li class="ml-4">
                    PDF and <i>LaTeX</i> Editing: Programming.Team uses <i>LaTeX</i> for rendering resumes into PDF
                    format. Users
                    can adjust the underlying <i>LaTeX</i> code themselves and re-render new PDFs at no additional cost.
                </li>
            </ul>
            <br />
        </MudText>

        <MudSpacer />

        @* TODO: mobile  *@
        @* TODO: loading *@
        <MudCarousel Class="mud-width-full" Style="height:650px;" ShowArrows="@arrows" ShowBullets="@bullets"
            EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
            @foreach (var posting in ViewModel.Postings)
            {
                var url = $"https://programming.team/api/resumes/{posting.Id}";
                @* ~28 rem *@
                <MudCarouselItem Transition="transition" Color="@Color.Primary" Class="d-flex">
                    <MudPaper Class="pa-8 ma-2 ml-8 flex-1 " Elevation="3" Style="height: 86%; width: 45%;">
                        <MudText>@Truncate(posting.Details, 600)</MudText>

                    </MudPaper>
                    <MudElement Class="d-flex">
                        <MudIcon Class="align-self-center" Icon="@Icons.Material.Filled.DoubleArrow" />
                    </MudElement>
                    @* <MudSpacer /> *@
                    <MudPaper Class="d-flex ma-2 mr-8 flex-1" Elevation="3" Style="height: 86%; width: 45%; overflow: scroll;">
                        <ProgTeamPdfViewer />
                        <MudLink Href="@url" Target="_bl">View</MudLink>
                    </MudPaper>
                </MudCarouselItem>
            }
        </MudCarousel>

        <MudSpacer />

        <MudText Typo="Typo.body1">
            <MudAlert Severity="Severity.Normal">
                If you’re interested in becoming a recruiter on the platform, please contact
                <MudLink Class="fw-bold" Href="mailto:jason@groundbreaker.solutions" Target="_blank" Typo="Typo.body2"
                    Color="Color.Primary">
                    jason@groundbreaker.solutions
                </MudLink>
            </MudAlert>
        </MudText>
    </MudElement>

}
@code {
    @* Carousel parmeters *@
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    @* private bool autocycle = true; *@
    private bool autocycle = false;
    private Transition transition = Transition.Slide;

    protected override void OnInitialized()
    {
        if (ViewModel != null)
            ViewModel.Postings.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public string Truncate(string s, int max)
    {
        if (s.Length > max)
            return s.Substring(0, max) + "...";
        return s;
    }
}