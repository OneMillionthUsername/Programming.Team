@inherits ReactiveComponentBase<AddSectionTemplateViewModel>
@if (ViewModel != null)
{
    <MudOverlay ZIndex="5" Visible="@ViewModel.IsOpen"
                Style="background-color: rgba(255,255,255,.3); padding: 20px"
                AutoClose="false" />

    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            
      
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>
            <MudStack>
                <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
                <MudSelect Label="Section" T="ResumePart" @bind-Value="ViewModel.SectionId">
                    @foreach (var part in ViewModel.ResumeParts)
                    {
                        <MudSelectItem T="ResumePart" Value="part">@part.ToString()</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Lines="10" @bind-Value="ViewModel.Template" Label="Template" Variant="Variant.Outlined" />
                <MudStack Row="true">
                    <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">Add Section Template</MudButton>
                    <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()">Cancel</MudButton>
                </MudStack>
            </MudStack>

        </div>
    </MudPopover>
}
<style>
    .mud-popover {
        width: 30vmax;
        padding: 1%;
        position: absolute;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) !important;
    }
</style>
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
            await ViewModel.Init.Execute().GetAwaiter();
        await base.OnAfterRenderAsync(firstRender);
    }
}
