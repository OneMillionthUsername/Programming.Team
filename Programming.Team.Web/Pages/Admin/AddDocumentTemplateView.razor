@inherits ReactiveComponentBase<AddDocumentTemplateViewModel>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

    <MudOverlay ZIndex="5" Visible="@ViewModel.IsOpen"
                Style="background-color: rgba(255,255,255,.3); padding: 20px"
                AutoClose="false" />


    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>
            <MudStack>
                <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
                <MudSelect Label="Document Type" T="DocumentType" @bind-Value="ViewModel.DocumentType" DisableScrollLock="true">
                    @foreach (var doctype in ViewModel.DocumentTypes)
                    {
                        <MudSelectItem T="DocumentType" Value="doctype">@doctype.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Lines="10" @bind-Value="ViewModel.Template" Label="Template" Variant="Variant.Outlined" />
                <MudStack Row="true">
                    <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">Add Document Template</MudButton>
                    <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()">Cancel</MudButton>
                </MudStack>
            </MudStack>

        </div>
    </MudPopover>

}

<style>
    .mud-overlay {
 
        min-height: 100%;
        width: 100%;
        z-index: 9999999;
    }

    .mud-popover-fixed {
        position: absolute !important;
    }
    .mud-popover {
        width: 30vmax;
        padding: 1%;
        position: absolute;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) !important;
    }


</style>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
