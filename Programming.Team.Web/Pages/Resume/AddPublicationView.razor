@inherits ReactiveComponentBase<AddPublicationViewModel>



@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
       
         

    <MudDialog @bind-Visible="ViewModel.IsOpen" 
           MaxWidth="MaxWidth.Medium" 
           FullWidth="true" 
           Class="px-4 pt-4 popover-z"
           Style="min-width:400px;">
    <DialogContent>

    @*<MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4 popover-z" Style="min-width:400px;">*@
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                                OnClick="() => ViewModel.IsOpen = false"
                                Color="Color.Default"
                                Class="ml-auto" />
            </div>
            <MudStack>
                <MudTextField @bind-Value="ViewModel.Title" Label="Title" Variant="Variant.Outlined" />
                    <SmartTextEditor TViewModel="AddPublicationViewModel" ViewModel="ViewModel.SmartTextEditor" />
                <MudTextField @bind-Value="ViewModel.Url" Label="URL" Variant="Variant.Outlined" />
                <MudDatePicker @bind-Date="ViewModel.PublishDateTime" Label="Publish Date"
                                MinDate="new DateTime(1950, 1, 1)" />
               <MudStack Row="true">
                    <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()" Class="fw-bold"
                                Variant="Variant.Filled" Color="Color.Primary">
                        Add Publication
                    </MudButton>
                    <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()" Class="fw-bold"
                                Variant="Variant.Filled" Color="Color.Primary">
                        Cancel
                    </MudButton>
                </MudStack>
            </MudStack>
        </div>
    </DialogContent>
    @*</MudPopover> *@
</MudDialog>

}

@code {

    public DateTime? SelectedDate { get; set; } = DateTime.Now;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
            await ViewModel.Init.Execute().GetAwaiter();
        await base.OnAfterRenderAsync(firstRender);
    }
}
