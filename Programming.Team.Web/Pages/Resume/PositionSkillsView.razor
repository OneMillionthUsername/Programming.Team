@inherits ReactiveComponentBase<PositionSkillsViewModel>
@attribute [Authorize]
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudButton OnClick="ViewModel.StartAdd.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
        Color="Color.Primary">Add Skill</MudButton>
    <AddPositionSkillView ViewModel="ViewModel.AddViewModel" />
    <MudStack Row="true" Wrap="Wrap.Wrap">
        @foreach (var e in ViewModel.Entities)
        {
            <PositionSkillView ViewModel="e" />
        }
    </MudStack>
    <MudButton OnClick="ViewModel.ExtractSkills.BindCommand<MouseEventArgs>()" Disabled="!ViewModel.CanExtractSkills" Class="fw-bold" Variant="Variant.Filled"
               Color="Color.Primary">Extract Skills</MudButton>
     @if(ViewModel.RawSkills.Count > 0)
     {
        <MudStack Row="true" Wrap="Wrap.Wrap">
            @foreach (var e in ViewModel.RawSkills)
            {
                <RawSkillView ViewModel="e" />
            }
        </MudStack>
     }
    <MudOverlay @bind-Visible="ViewModel.IsLoading" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
    </MudOverlay>
}

@code {
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.Entities.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
            ViewModel.RawSkills.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();

        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
