@inherits ReactiveComponentBase<AddProjectViewModel>

<style>

</style>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

      <MudDialog @bind-Visible="ViewModel.IsOpen" 
           MaxWidth="MaxWidth.Medium" 
           FullWidth="true" 
           Class="px-4 pt-4 popover-z"
           Style="min-width:400px;">
    <DialogContent>
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>

            <MudStepper ActiveStepIndex="@activeStepIndex">
                <!-- Step 1: Company Details -->
                <MudStep Title="Company" HasError="step1Error">
                    <MudStack Spacing="3">
                        <SearchSelectEntityView TAddView="AddPositionView"
                                                TEntity="Programming.Team.Core.Position" TKey="Guid" TAddViewModel="AddPositionViewModel"
                                                TSearchSelectViewModel="SearchSelectPositionViewModel"
                                                ViewModel="ViewModel.PositionSelector" SupportAdd="false" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Project Details -->
                <MudStep Title="Project" Disabled="step1Error">
                    <MudStack Spacing="3">
                            <MudTextField @bind-Value="ViewModel.Name" For="() => ViewModel.Name"
                                          Label="Name" Variant="Variant.Outlined" />
                            <SmartTextEditor TViewModel="AddProjectViewModel" ViewModel="ViewModel.SmartTextEditor" />
                            <MudTextField @bind-Value="ViewModel.ProjectUrl" For="() => ViewModel.ProjectUrl"
                                          Label="Project URL" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="ViewModel.SourceUrl" For="() => ViewModel.SourceUrl"
                                          Label="Source URL" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="ViewModel.License" For="() => ViewModel.License"
                                          Label="License" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="ViewModel.SortOrder" For="() => ViewModel.SortOrder"
                                          Label="Sort Order" Variant="Variant.Outlined" />
                        <div class="step-actions">

                            <div>

                                <MudButton Class="completeButtonPosition"
                                           OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">
                                    Complete
                                </MudButton>
                            </div>
                        </div>

                    </MudStack>
                </MudStep>
            </MudStepper>

   
        </div>
        </DialogContent>
        @*</MudPopover> *@
    </MudDialog>

}

@code {
    private bool step1Error = true;
    private readonly CompositeDisposable Disposables = new CompositeDisposable();

    // Stepper control
    private int activeStepIndex = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.PositionSelector.WhenPropertyChanged(p => p.Selected).Subscribe(p =>
            {
                if (p.Sender.Selected != null)
                {
                    step1Error = false;
                }
                else
                {
                    step1Error = true;
                    activeStepIndex = 0; // Reset to first step
                }
                StateHasChanged();
            }).DisposeWith(Disposables);
        }
        base.OnInitialized();
    }
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Disposables.Dispose();
        }
        base.Dispose(disposing);
    }
}

