@inherits ReactiveComponentBase<ProjectSkillsViewModel>
@attribute [Authorize]
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudButton OnClick="ViewModel.StartAdd.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
               Color="Color.Primary">Add Skill</MudButton>
    <AddProjectSkillView ViewModel="ViewModel.AddViewModel" />
    <MudStack Row="true" Wrap="Wrap.Wrap" Class="ownSkillsDiv">
        @foreach (var e in ViewModel.Entities)
        {
         
            <ProjectSkillView ViewModel="e" />
     
        }
    </MudStack>
    <div class="hover-wrapper">
        <MudButton OnClick="ViewModel.ExtractSkills.BindCommand<MouseEventArgs>()" Disabled="!ViewModel.CanExtractSkills" Class="fw-bold hover-button" Variant="Variant.Filled"
                   Color="Color.Primary" >Extract Skills</MudButton>
        <span class="hover-tooltip">Extract skills is for extracting additional skills using AI.</span>
    </div>
    @if (ViewModel.RawSkills.Count > 0)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap" Class="rawSkillsDivs">
            @foreach (var e in ViewModel.RawSkills)
            {
                <RawSkillView ViewModel="e" />
            }
        </MudStack>
    }
}

@code {

   
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.Entities.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
            ViewModel.RawSkills.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();

        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
