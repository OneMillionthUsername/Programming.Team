@inherits ReactiveComponentBase<ProjectSkillsViewModel>
@attribute [Authorize]
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudButton OnClick="ViewModel.StartAdd.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
               Color="Color.Primary">Add Skill</MudButton>
    <AddProjectSkillView ViewModel="ViewModel.AddViewModel" />
    <MudStack Row="true" Wrap="Wrap.Wrap">
        @foreach (var e in ViewModel.Entities)
        {
            <ProjectSkillView ViewModel="e" />
        }
    </MudStack>
    <SuggestAddSkillsForProjectView ViewModel="ViewModel.SuggestAddSkillsVM" />
    <MudButton OnClick="ViewModel.ExtractSkills.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
               Color="Color.Primary">Extract Skills</MudButton>
    @if (ViewModel.RawSkills.Count > 0)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap">
            @foreach (var e in ViewModel.RawSkills)
            {
                <RawSkillView ViewModel="e" />
            }
        </MudStack>
        <MudButton OnClick="ViewModel.AssociateSkills.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
                   Color="Color.Primary">Associate Skills</MudButton>
    }
}

@code {
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.Entities.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
            ViewModel.RawSkills.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();

        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
