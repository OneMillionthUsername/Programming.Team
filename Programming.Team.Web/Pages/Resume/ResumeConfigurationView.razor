@inherits ReactiveComponentBase<ResumeConfigurationViewModel>
@using MudBlazor.Utilities
@if(ViewModel != null)
{
    <MudStack Class="resumeBuilder">
        <div class="firstPart">
        <MudNumericField Class="config-field" @bind-Value="ViewModel.BioParagraphs" Label="Bio Paragraphs" Variant="Variant.Outlined" />
        <MudNumericField Class="config-field" @bind-Value="ViewModel.BioBullets" Label="Bio Bullets" Variant="Variant.Outlined" />
        <MudNumericField Class="config-field" HelperTextOnFocus="true" HelperText="This lever will filter/collapse positions by the percentage match to the submitted job description." 
        @bind-Value="ViewModel.MatchThreshold" Label="Match Threshold" Variant="Variant.Outlined"/>
        <MudNumericField Class="config-field" @bind-Value="ViewModel.TargetLengthPer10Percent" Label="Target Length Per 10%" Variant="Variant.Outlined"/>
        <MudNumericField Class="config-field" @bind-Value="ViewModel.BulletsPer20Percent" Label="Bullets Per 20%" Variant="Variant.Outlined"/>
        <MudNumericField Class="config-field" @bind-Value="ViewModel.SkillsPer20Percent" Label="Skills Per 20%" Variant="Variant.Outlined" />
        <MudCheckBox Class="config-checkbox" @bind-Value="ViewModel.HideSkillsNotInJD" Label="Hide Skills not in JD"/>
        <MudCheckBox Class="config-checkbox" @bind-Value="ViewModel.HidePositionsNotInJD" Label="Hide Positions not in JD" />
        <MudNumericField Class="config-field" @bind-Value="ViewModel.SummaryPageLength" Label="Resume Summary Page Length" Variant="Variant.Outlined"/>
        </div>
        <MudSelect Class="template-select" Label="Document Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedTemplate" ToStringFunc="e => e?.Name">
            @foreach (var template in ViewModel.DocumentTemplates)
            {
                <MudSelectItem Class="template-select-item" T="DocumentTemplate" Value="template">@template.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDropContainer T="ResumePartViewModel" Items="ViewModel.ResumeParts" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selected.ToString() == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1 resume-parts-container">
            <ChildContent>
                <MudPaper Class="drop-zone include-zone">
                    <MudList T="ResumePartViewModel" Class="drop-zone-list">
                        <MudListSubheader Class="drop-zone-header">Include in Resume Render</MudListSubheader>
                        <MudDropZone Class="include-drop-zone" T="ResumePartViewModel" Identifier="True" AllowReorder="true" />
                    </MudList>
                </MudPaper>
                <MudPaper Class="drop-zone exclude-zone">
                    <MudList T="ResumePartViewModel"  Class="drop-zone-list">
                        <MudListSubheader Class="drop-zone-header">Exclude</MudListSubheader>
                        <MudDropZone Class="exclude-drop-zone" T="ResumePartViewModel" Identifier="False" AllowReorder="true" />
                    </MudList>
                </MudPaper>
            </ChildContent>
            <ItemRenderer>
                <MudListItem Class="resume-part-item" T="string" Text="@($"{Enum.GetName(typeof(ResumePart), context.Part)}")">
                    <MudStack Class="resume-part-content" Row="true">
                        <h4 Class="resume-part-title">@Enum.GetName(typeof(ResumePart), context.Part)</h4>
                        <MudSelect Class="part-template-select" Label="Template" T="SectionTemplate" @bind-Value="context.SelectedTemplate" ToStringFunc="e => e?.Name">
                            @foreach (var doctype in context.SectionTemplates)
                            {
                                <MudSelectItem Class="part-template-item" T="SectionTemplate" Value="doctype">@doctype.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                </MudListItem>
            </ItemRenderer>
        </MudDropContainer>
    </MudStack>
}
@code {
    private readonly CompositeDisposable disposables = new();
    protected override void Dispose(bool disposing)
    {
        disposables.Dispose();
        base.Dispose(disposing);
    }
    protected override void OnInitialized()
    {
        if(ViewModel != null)
        {
            ViewModel.WhenPropertyChanged(p => p.IsLoaded).Subscribe(p =>
            {
                if(p.Value)
                {
                    StateHasChanged();
                    
                    _container?.Refresh();
                }
            }).DisposeWith(disposables);
        }
        
        base.OnInitialized();
    }
    private MudDropContainer<ResumePartViewModel>? _container = null!;
    private void ItemUpdated(MudItemDropInfo<ResumePartViewModel> dropItem)
    {
        dropItem.Item.Selected = bool.Parse(dropItem.DropzoneIdentifier);
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "False" => ViewModel.ResumeParts.Count(x => x.Selected),
            _ => 0
        };
        ViewModel.ResumeParts.UpdateOrder(dropItem, item => item.Order, indexOffset);
    }
}
