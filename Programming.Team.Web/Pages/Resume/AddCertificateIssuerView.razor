@inherits ReactiveComponentBase<AddCertificateIssuerViewModel>
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    @*  <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            <MudStack>
                <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="ViewModel.Description" Label="Description" Variant="Variant.Outlined" Lines="10" />
                <MudTextField @bind-Value="ViewModel.Url" Label="URL" Variant="Variant.Outlined" />
                <MudStack Row="true">
                    <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">Add Issuer</MudButton>
                    <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()">Cancel</MudButton>
                </MudStack>
            </MudStack>
        </div>
    </MudPopover>*@
    @if (ViewModel.IsOpen)
    {
        <MudStack>
            <div class="d-flex flex-column">
                <MudStack>
                    <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="ViewModel.Description" Label="Description" Variant="Variant.Outlined" Lines="10" />
                    <MudTextField @bind-Value="ViewModel.Url" Label="URL" Variant="Variant.Outlined" />
                    <MudStack Row="true">
                        <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">Add Issuer</MudButton>
                        <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()">Cancel</MudButton>
                    </MudStack>
                </MudStack>
            </div>
        </MudStack>

    }
}

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
            await ViewModel.Init.Execute().GetAwaiter();
        await base.OnAfterRenderAsync(firstRender);
    }
}
