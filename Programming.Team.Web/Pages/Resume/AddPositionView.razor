@*@inherits ReactiveComponentBase<AddPositionViewModel>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />


    <MudOverlay ZIndex="5" Visible="@ViewModel.IsOpen"
                Style="background-color: rgba(255,255,255,.3); padding: 20px"
                AutoClose="false" />



    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="main-content">
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>
            <MudStack>
                <SearchSelectEntityView TAddView="AddCompanyView"
                                        TEntity="Company" TKey="Guid" TAddViewModel="AddCompanyViewModel"
                                        TSearchSelectViewModel="SearchSelectCompanyViewModel"
                                        ViewModel="ViewModel.CompanyViewModel" />

                <MudTextField @bind-Value="ViewModel.Title" Label="Title" Variant="Variant.Outlined" />

              
             

                <div class="d-flex gap-3">
                    <MudDatePicker @bind-Date="ViewModel.StartDateTime"
                                   Label="Start Date"
                                   MinDate="new DateTime(1950, 1, 1)"
                                   Class="flex-grow-1" />
                    <MudDatePicker @bind-Date="ViewModel.EndDateTime"
                                   Label="End Date"
                                   MinDate="new DateTime(1950, 1, 1)"
                                   Class="flex-grow-1" />
                </div>

                <MudTextField Lines="10"
                              @bind-Value="ViewModel.Description"
                              Label="Description"
                              Variant="Variant.Outlined" />

                <MudTextField @bind-Value="ViewModel.SortOrder"
                              Label="Sort Order"
                              Variant="Variant.Outlined" />


          
                <MudStack Row="true">
                    <MudButton OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()"
                               Class="fw-bold"
                               Variant="Variant.Filled"
                               Color="Color.Primary">
                        Cancel
                    </MudButton>
                    <MudButton OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()"
                               Class="fw-bold"
                               Variant="Variant.Filled"
                               Color="Color.Primary">
                        Add Position
                    </MudButton>
                </MudStack>
            </MudStack>
        </div>
    </MudPopover>

}

@code {
    public string ProjectName { get; set; }
    public List<string> Technologies { get; set; } = new();
    public string ProjectDescription { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}*@

@inherits ReactiveComponentBase<AddPositionViewModel>

<style>
    .custom-dim {
        z-index: 10000 !important; /* under autocomplete and popover */
        position: fixed;
    }

    .popover-z {
        z-index: 99999999 !important; /* above overlay, below autocomplete dropdown */
        position: fixed !important;
    }
</style>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

    <MudOverlay Visible="@ViewModel.IsOpen" Class="custom-dim"
                Style="background-color: rgba(0,0,0,.4); padding: 20px"
                AutoClose="false" />

    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4 popover-z" Style="min-width:400px;">
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>
            <MudStepper ActiveStepIndex="@activeStepIndex">
                <!-- Step 1: Company Details -->
                <MudStep Title="Company" HasError="step1Error">
                    <MudStack Spacing="3">
                     @*   <MudTextField T="string"
                                      Label="Company Name"
                                      @bind-Value="companyName"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Description"
                                      @bind-Value="companyDescription"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="City"
                                      @bind-Value="companyCity"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="State/Province"
                                      @bind-Value="companyState"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Country"
                                      @bind-Value="companyCountry"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Website URL"
                                      @bind-Value="companyUrl"
                                      Variant="Variant.Outlined" />*@
                        <SearchSelectEntityView TAddView="AddCompanyView"
                                                TEntity="Company" TKey="Guid" TAddViewModel="AddCompanyViewModel"
                                                TSearchSelectViewModel="SearchSelectCompanyViewModel"
                                                ViewModel="ViewModel.CompanyViewModel" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Position Details -->
                <MudStep Title="Position" Disabled="step1Error">
                    <MudStack Spacing="3">
                        <MudTextField T="string"
                                      Label="Title"
                                      @bind-Value="ViewModel.Title"
                                      Variant="Variant.Outlined" />

                        <div class="d-flex gap-3">
                            <MudTextField T="string"
                                          Label="Start Date (YYYY-MM-DD)"
                                          @bind-Value="startDateString"
                                          Class="flex-grow-1"
                                          Variant="Variant.Outlined" />

                            <MudTextField T="string"
                                          Label="End Date (YYYY-MM-DD)"
                                          @bind-Value="endDateString"
                                          Class="flex-grow-1"
                                          Variant="Variant.Outlined" />
                        </div>

                        <MudTextField Lines="10"
                                      T="string"
                                      @bind-Value="ViewModel.Description"
                                      Label="Description"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="int?"
                                   
                                      Label="Sort Order"
                                      Variant="Variant.Outlined" />
                    </MudStack>
                </MudStep>
            </MudStepper>

        </div>
    </MudPopover>
}

@code {
    private bool step1Error = true;
    private readonly CompositeDisposable Disposables = new CompositeDisposable();

    // Stepper control
    private int activeStepIndex = 0;

    private void NextStep() => activeStepIndex++;
    private void PreviousStep() => activeStepIndex--;

    // Company fields
    private string companyName = "";
    private string companyDescription = "";
    private string companyCity = "";
    private string companyState = "";
    private string companyCountry = "";
    private string companyUrl = "";

    // Date fields as strings
    private string startDateString = DateTime.Now.ToString("yyyy-MM-dd");
    private string endDateString = "";

    private async Task SaveAllData()
    {
        // Save company data first
        if (!string.IsNullOrWhiteSpace(companyName))
        {
            // await SaveCompany(companyName, companyDescription, ...);
        }

        // Parse dates and set to ViewModel
        if (DateOnly.TryParse(startDateString, out var startDate))
            ViewModel.StartDateTime = startDate.ToDateTime(TimeOnly.MinValue);

        if (DateOnly.TryParse(endDateString, out var endDate))
            ViewModel.EndDateTime = endDate.ToDateTime(TimeOnly.MinValue);
        else
            ViewModel.EndDateTime = null;

        // Save position using ViewModel
        await ViewModel.Add.Execute().GetAwaiter();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.CompanyViewModel.WhenPropertyChanged(p => p.Selected).Subscribe(p =>
            {
                if (p.Sender.Selected != null)
                {
                    step1Error = false;
                }
                else
                {
                    step1Error = true;
                    activeStepIndex = 0; // Reset to first step
                }
                StateHasChanged();
            }).DisposeWith(Disposables);
        }
        base.OnInitialized();
    }
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Disposables.Dispose();
        }
        base.Dispose(disposing);
    }
}
