@inherits ReactiveComponentBase<AddRecommendationViewModel>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

    <MudOverlay ZIndex="5" Visible="@ViewModel.IsOpen"
                Style="background-color: rgba(0,0,0,.4); padding: 20px"
                AutoClose="false" />

    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="ClosePopup"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>

            <MudStepper ActiveStepIndex="@activeStep">
                <!-- Step 1: Basic Information -->
                <MudStep Title="Basic Information">
                    <MudStack Spacing="3">
                        <MudTextField T="string"
                                      Label="Position"
                                      @oninput="e => position = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Name"
                                      @oninput="e => name = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Title"
                                      @oninput="e => title = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Lines="5"
                                      Label="Body"
                                      @oninput="e => body = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudNumericField T="int?"
                                         Label="Sort Order"
                                         @bind-Value="sortOrder"
                                         Variant="Variant.Outlined" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Company Details -->
                <MudStep Title="Company Details">
                    <MudStack Spacing="3">
                        <MudTextField T="string"
                                      Label="Company"
                                      @oninput="e => company = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Label="Job Title"
                                      @oninput="e => jobTitle = e.Value.ToString()"
                                      Variant="Variant.Outlined" />

                        <MudDatePicker T="DateTime?"
                                       Label="Start Date"
                                       @bind-Date="startDate"
                                       Variant="Variant.Outlined" />

                        <MudDatePicker T="DateTime?"
                                       Label="End Date"
                                       @bind-Date="endDate"
                                       Variant="Variant.Outlined" />

                        <MudNumericField T="int?"
                                         Label="Sort Order"
                                         @bind-Value="companySortOrder"
                                         Variant="Variant.Outlined" />
                    </MudStack>
                </MudStep>
            </MudStepper>


        </div>
    </MudPopover>
}

@code {
    // Form fields
    private string position = "";
    private string name = "";
    private string title = "";
    private string body = "";
    private int? sortOrder = 0;
    private string company = "";
    private string jobTitle = "";
    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private int? companySortOrder = 0;

    // Stepper control
    private int activeStep = 0;

    private void NextStep() => activeStep++;
    private void PreviousStep() => activeStep--;

    private void ClosePopup()
    {
        if (ViewModel != null)
        {
            ViewModel.IsOpen = false;
        }
    }

    private async Task SaveData()
    {
        // Create your data object here
        var recommendationData = new
        {
            Position = position,
            Name = name,
            Title = title,
            Body = body,
            SortOrder = sortOrder,
            Company = company,
            JobTitle = jobTitle,
            StartDate = startDate,
            EndDate = endDate,
            CompanySortOrder = companySortOrder
        };

        // Call your save logic here
        // await ViewModel.SaveCommand.ExecuteAsync(recommendationData);

        ClosePopup();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}