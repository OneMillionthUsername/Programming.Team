@inherits ReactiveComponentBase<AddRecommendationViewModel>

<style>
    .custom-dim {
        z-index: 10000 !important; /* under autocomplete and popover */
        position: fixed;
    }

    .popover-z {
        z-index: 99999999 !important; /* above overlay, below autocomplete dropdown */
        position: fixed !important;
    }
</style>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

   @* <MudOverlay Visible="@ViewModel.IsOpen" Class="custom-dim"
                Style="background-color: rgba(0,0,0,.4); padding: 20px"
                AutoClose="false" />*@

    <MudDialog @bind-Visible="ViewModel.IsOpen" 
           MaxWidth="MaxWidth.Medium" 
           FullWidth="true" 
           Class="px-4 pt-4 popover-z"
           Style="min-width:400px;">
    <DialogContent>

    @*<MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4 popover-z" Style="min-width:400px;">*@
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="ViewModel.Cancel.BindCommand<MouseEventArgs>()"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>

            <MudStepper ActiveStepIndex="@activeStepIndex">
                <!-- Step 1: Basic Information -->
                <MudStep Title="Basic Information" HasError="step1Error">
                    <MudStack Spacing="3">
                        <SearchSelectEntityView TAddView="AddPositionView"
                                                TEntity="Core.Position" TKey="Guid" TAddViewModel="AddPositionViewModel"
                                                TSearchSelectViewModel="SearchSelectPositionViewModel"
                                                ViewModel="ViewModel.SelectPosition" SupportAdd="false" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Reccomendation Details -->
                <MudStep Title="Recomendation Details" Disabled="step1Error">
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="ViewModel.Name" For="() => ViewModel.Name" Label="Name" Variant="Variant.Outlined"/>
                        <SmartTextEditor TViewModel="AddRecommendationViewModel" ViewModel="ViewModel.SmartTextEditor" />
                        <MudTextField @bind-Value="ViewModel.Title" For="() => ViewModel.Title" Label="Title" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="ViewModel.SortOrder" For="() => ViewModel.SortOrder" Label="Sort Order" Variant="Variant.Outlined" />
                        <div class="step-actions">

                            <div>

                                <MudButton Class="completeButtonPosition"
                                           OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">
                                    Complete
                                </MudButton>
                            </div>
                        </div>



                    </MudStack>
                </MudStep>
            </MudStepper>
          


        </div>
        </DialogContent>
    @*</MudPopover> *@
    </MudDialog>

}

@code {

    private bool step1Error = true;
        private readonly CompositeDisposable Disposables = new CompositeDisposable();

    // Stepper control
    private int activeStepIndex = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.SelectPosition.WhenPropertyChanged(p => p.Selected).Subscribe(p =>
            {
                if (p.Sender.Selected != null)
                {
                    step1Error = false;
                }
                else
                {
                    step1Error = true;
                    activeStepIndex = 0; // Reset to first step
                }
                StateHasChanged();
            }).DisposeWith(Disposables);
        }
        base.OnInitialized();
    }
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Disposables.Dispose();
        }
        base.Dispose(disposing);
    }
}