@inherits ReactiveComponentBase<PostingViewModel>

@if(ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudStack>
        <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
        <MudSelect Label="Document Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedTemplate" ToStringFunc="e => e?.Name">
            @foreach (var doctype in ViewModel.DocumentTemplates)
            {
                <MudSelectItem T="DocumentTemplate" Value="doctype">@doctype.Name</MudSelectItem>
            }
        </MudSelect>
        <ResumeConfigurationView ViewModel="ViewModel.ConfigurationViewModel"/>
        <MudTextField Lines="10" @bind-Value="ViewModel.Details" Label="Details" Variant="Variant.Outlined" />
        <MudStack Row="true">
            <MudTextField @bind-Value="ViewModel.CompanyName" Label="Company Name" Variant="Variant.Outlined"/>
            <MudButton OnClick="ViewModel.ExtractCompanyName.BindCommand<MouseEventArgs>()">Extract Company Name</MudButton>
            @if (ViewModel.CanResearchCompany)
            {
                <MudButton OnClick="ViewModel.ResearchCompany.BindCommand<MouseEventArgs>()">Research Company</MudButton>
            }
        </MudStack>
        <MudTextField Lines="10" @bind-Value="ViewModel.RenderedLaTex" Label="Resume LaTeX" Variant="Variant.Outlined" />
        @{
            var str = $"/api/resumes/{ViewModel.Id}";
            <MudLink Href="@str" Target="_blank">Download Resume</MudLink>
        }
        @if(!string.IsNullOrWhiteSpace(ViewModel.CompanyResearch))
        {
            <Markdown>@ViewModel.CompanyResearch</Markdown>
        }
        <CoverLetterConfigurationView ViewModel="ViewModel.CoverLetterConfigurationViewModel"/>
        @if (!string.IsNullOrWhiteSpace(ViewModel.CoverLetterLaTeX))
        {
            var strCover = $"/api/coverletters/{ViewModel.Id}";
            <MudTextField Lines="10" @bind-Value="ViewModel.CoverLetterLaTeX" Label="Cover Letter LaTeX" Variant="Variant.Outlined" />
            <MudLink Href="@strCover" Target="_blank">Download Cover Letter</MudLink>
        }
        <MudStack Row="true">
            <MudSelect Label="Text Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedMarkdownTemplate" ToStringFunc="e => e?.Name">
                @foreach (var doctype in ViewModel.MarkdownTemplates)
                {
                    <MudSelectItem T="DocumentTemplate" Value="doctype">@doctype.Name</MudSelectItem>
                }
            </MudSelect>
            @if(ViewModel.CanRenderMarkdown)
            {
                <MudButton OnClick="ViewModel.RenderMarkdown.BindCommand<MouseEventArgs>()">Render Text</MudButton>
            }
        </MudStack>
        
        @if (!string.IsNullOrWhiteSpace(ViewModel.ResumeMarkdown))
        {
            var strMarkdown = $"api/resumes/{ViewModel.Id}.txt";
            <MudTextField Lines="10" @bind-Value="ViewModel.ResumeMarkdown" Label="Resume Text" Variant="Variant.Outlined"/>
            <MudLink Href="@strMarkdown" Target="_blank">Download Text Version</MudLink>
        }

        <MudStack Row="true">
            <MudButton OnClick="ViewModel.Update.BindCommand<MouseEventArgs>()">Update</MudButton>
            <MudStack Row="true">
                <MudCheckBox @bind-Value="ViewModel.Enrich" Label="Enrich?"/>
                <MudCheckBox @bind-Value="ViewModel.RenderPDF" Label="RenderPDF?"/>
                <MudButton OnClick="ViewModel.Rebuild.BindCommand<MouseEventArgs>()">Rebuild Resume</MudButton>
            </MudStack>
            <MudButton OnClick="ViewModel.Render.BindCommand<MouseEventArgs>()">Render Resume</MudButton>
            <MudButton OnClick="ViewModel.GenerateCoverLetter.BindCommand<MouseEventArgs>()">Generate Cover Letter</MudButton>
            <MudButton OnClick="ViewModel.RenderCoverLetter.BindCommand<MouseEventArgs>()">Render Cover Letter</MudButton>
            <MudButton OnClick="ViewModel.Delete.BindCommand<MouseEventArgs>()">Delete</MudButton>
        </MudStack>
    </MudStack>
    <MudOverlay @bind-Visible="ViewModel.IsOverlayOpen" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true"/>
        <h1><MudText Color="Color.Secondary">@ViewModel.Progress</MudText></h1>
    </MudOverlay>
    <MudOverlay @bind-Visible="ViewModel.IsProcessing" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
    </MudOverlay>
}

@code {

}
