@inherits ReactiveComponentBase<PostingViewModel>
<style>
        .scroll-wrapper {
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden;
    border: 1px solid rgba(0,0,0,0.12);
    border-radius: 6px;
    background-color: white;
}

.markdown-content {
    word-wrap: break-word;
    white-space: normal;
    overflow-wrap: anywhere;
}
    </style>
@if(ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudStack>
        <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
        <MudSelect Label="Document Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedTemplate" ToStringFunc="e => e?.Name">
            @foreach (var doctype in ViewModel.DocumentTemplates)
            {
                <MudSelectItem T="DocumentTemplate" Value="doctype">@doctype.Name</MudSelectItem>
            }
        </MudSelect>
        <ResumeConfigurationView ViewModel="ViewModel.ConfigurationViewModel"/>
        <MudTextField Lines="10" @bind-Value="ViewModel.Details" Label="Details" Variant="Variant.Outlined" />
        <MudStack Row="true">
            <MudTextField @bind-Value="ViewModel.CompanyName" Label="Company Name" Variant="Variant.Outlined"/>
            <MudButton OnClick="ViewModel.ExtractCompanyName.BindCommand<MouseEventArgs>()">Extract Company Name</MudButton>
            @if (ViewModel.CanResearchCompany)
            {
                <MudButton OnClick="ViewModel.ResearchCompany.BindCommand<MouseEventArgs>()">Research Company</MudButton>
            }
        </MudStack>
        <MudTextField Lines="10" @bind-Value="ViewModel.RenderedLaTex" Label="Resume LaTeX" Variant="Variant.Outlined" />
        @{
            var str = $"/api/resumes/{ViewModel.Id}";
            string resumeUri = System.Web.HttpUtility.UrlEncode($"https://jobme.today/api/resumes/{ViewModel.Id}.tex");
            string strResumeUri = $"https://www.overleaf.com/docs?snip_uri={resumeUri}";
            <MudLink Href="@str" Target="_blank">Download Resume</MudLink>
            <MudLink Href="@strResumeUri" Target="_blank">Edit Resume in Overleaf</MudLink>
        }
        @if(!string.IsNullOrWhiteSpace(ViewModel.CompanyResearch))
        {
            <MudPaper Class="scroll-wrapper p-4" Elevation="1">
                <div class="markdown-content">
                    <Markdown>@ViewModel.CompanyResearch</Markdown>
                </div>
            </MudPaper>
        }
        <CoverLetterConfigurationView ViewModel="ViewModel.CoverLetterConfigurationViewModel"/>
        @if (!string.IsNullOrWhiteSpace(ViewModel.CoverLetterLaTeX))
        {
            var strCover = $"/api/coverletters/{ViewModel.Id}";
            string coverUri = System.Web.HttpUtility.UrlEncode($"https://jobme.today/api/coverletters/{ViewModel.Id}.tex");
            string strCoverUri = $"https://www.overleaf.com/docs?snip_uri={coverUri}";
            <MudTextField Lines="10" @bind-Value="ViewModel.CoverLetterLaTeX" Label="Cover Letter LaTeX" Variant="Variant.Outlined" />
            <MudLink Href="@strCover" Target="_blank">Download Cover Letter</MudLink>
            <MudLink Href="@strCoverUri" Target="_blank">Edit Cover Letter in Overleaf</MudLink>
        }
        @if(!string.IsNullOrWhiteSpace(ViewModel.ResumeSummaryLatex))
        {
            var strSummary = $"/api/resumes/summary/{ViewModel.Id}";
            string resumeSummaryUri = System.Web.HttpUtility.UrlEncode($"https://jobme.today/api/resumes/summary/{ViewModel.Id}.tex");
            string strResumeSummaryUri = $"https://www.overleaf.com/docs?snip_uri={resumeUri}";
            <MudTextField Lines="10" @bind-Value="ViewModel.ResumeSummaryLatex" Label="Resume Summary LaTeX" Variant="Variant.Outlined"/>
            <MudLink Href="@strSummary" Target="_blank">Download Resume Summary</MudLink>
            <MudLink Href="@strResumeSummaryUri" Target="_blank">Edit Summary in Overleaf</MudLink>
        }
        <MudStack Row="true">
            <MudSelect Label="Text Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedMarkdownTemplate" ToStringFunc="e => e?.Name">
                @foreach (var doctype in ViewModel.MarkdownTemplates)
                {
                    <MudSelectItem T="DocumentTemplate" Value="doctype">@doctype.Name</MudSelectItem>
                }
            </MudSelect>
            @if(ViewModel.CanRenderMarkdown)
            {
                <MudButton OnClick="ViewModel.RenderMarkdown.BindCommand<MouseEventArgs>()">Render Text</MudButton>
            }
        </MudStack>
        
        @if (!string.IsNullOrWhiteSpace(ViewModel.ResumeMarkdown))
        {
            var strMarkdown = $"api/resumes/{ViewModel.Id}.txt";
            <MudTextField Lines="10" @bind-Value="ViewModel.ResumeMarkdown" Label="Resume Text" Variant="Variant.Outlined"/>
            <MudLink Href="@strMarkdown" Target="_blank">Download Text Version</MudLink>
        }

        <MudStack Row="true">
            <MudButton OnClick="ViewModel.Update.BindCommand<MouseEventArgs>()">Update</MudButton>
            <MudStack Row="true">
                <MudCheckBox @bind-Value="ViewModel.Enrich" Label="Enrich?"/>
                <MudCheckBox @bind-Value="ViewModel.RenderPDF" Label="RenderPDF?"/>
                <MudButton OnClick="ViewModel.Rebuild.BindCommand<MouseEventArgs>()">Rebuild Resume</MudButton>
            </MudStack>
            <MudButton OnClick="ViewModel.Render.BindCommand<MouseEventArgs>()">Render Resume</MudButton>
            <MudButton OnClick="ViewModel.GenerateCoverLetter.BindCommand<MouseEventArgs>()">Generate Cover Letter</MudButton>
            <MudButton OnClick="ViewModel.RenderCoverLetter.BindCommand<MouseEventArgs>()">Render Cover Letter</MudButton>
            @if (ViewModel.CanSummarizeResume)
            {
                <MudButton OnClick="ViewModel.SummarizeResume.BindCommand<MouseEventArgs>()">Summarize Resume</MudButton>
            }
            @if(ViewModel.CanGenerateInterviewQuestions)
            {
                <MudButton OnClick="ViewModel.GenerateInterviewQuestions.BindCommand<MouseEventArgs>()">Generate Interview Questions</MudButton>
            }
            @if(ViewModel.CanGenerateEmployeerQuestions)
            {
                <MudButton OnClick="ViewModel.GenerateEmployeerQuestions.BindCommand<MouseEventArgs>()">Generate Employeer Questions</MudButton>
            }
            <MudButton OnClick="ViewModel.Delete.BindCommand<MouseEventArgs>()">Delete</MudButton>
        </MudStack>
        @if(!string.IsNullOrWhiteSpace(ViewModel.InterviewQuestions))
        {
            <MudPaper Class="scroll-wrapper p-4" Elevation="1">
               <div class="markdown-content"> <Markdown>@ViewModel.InterviewQuestions</Markdown></div>
            </MudPaper>
        }
        @if(!string.IsNullOrWhiteSpace(ViewModel.QuestionsToAsk))
        {
            <MudPaper Class="scroll-wrapper p-4" Elevation="1">
                <div class="markdown-content"><Markdown>@ViewModel.QuestionsToAsk</Markdown></div>
            </MudPaper>
        }
    )
    </MudStack>
    <MudOverlay @bind-Visible="ViewModel.IsOverlayOpen" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true"/>
        <h1><MudText Color="Color.Secondary">@ViewModel.Progress</MudText></h1>
    </MudOverlay>
    <MudOverlay @bind-Visible="ViewModel.IsProcessing" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
    </MudOverlay>
    
}

@code {

}
