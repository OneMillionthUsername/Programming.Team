@inherits ReactiveComponentBase<AddEducationViewModel>
<style>
    .custom-dim {
        z-index: 900 !important; /* under autocomplete and popover */
        position: fixed;
    }

    .popover-z {
        z-index: 1200 !important; /* above overlay, below autocomplete dropdown */
    }
</style>
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />

    <MudOverlay Visible="@ViewModel.IsOpen" Class="custom-dim"
                Style="background-color: rgba(0,0,0,.4); padding: 20px"
                AutoClose="false" />

    <MudPopover Open="ViewModel.IsOpen" Fixed="true" Class="px-4 pt-4 popover-z" Style="min-width:400px;min-height:500px">
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>

            <MudStepper @bind-ActiveStep="activeStepIndex">
                <!-- Step 1: Institution Details -->
                <MudStep Title="Institution">
                    <MudStack Spacing="3">
                        <SearchSelectEntityView TAddView="AddInstitutionView"
                                                TEntity="Institution" TKey="Guid" TAddViewModel="AddInstitutionViewModel"
                                                TSearchSelectViewModel="SearchSelectInstiutionViewModel"
                                                ViewModel="ViewModel.SelectInstiutionViewModel" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Education Details -->
                <MudStep Title="Education">
                    <MudStack Spacing="3">
                        <MudText>Selected Institution: @ViewModel.SelectInstiutionViewModel.Selected?.Name</MudText>
                        
                        <MudTextField T="string"
                                      Label="Major"
                                      @bind-Value="ViewModel.Major"
                                      Variant="Variant.Outlined" />

                        <MudCheckBox T="bool"
                                     Label="Graduated?"
                                     @bind-Value="ViewModel.Graduated" />

                        <MudDatePicker T="DateTime?"
                                       Label="Start Date"
                                       @bind-Date="ViewModel.StartDateTime"
                                       MinDate="new DateTime(1950, 1, 1)"
                                       Variant="Variant.Outlined" />

                        <MudDatePicker T="DateTime?"
                                       Label="End Date"
                                       @bind-Date="ViewModel.EndDateTime"
                                       MinDate="new DateTime(1950, 1, 1)"
                                       Variant="Variant.Outlined" />

                        <MudTextField T="string"
                                      Lines="5"
                                      Label="Description"
                                      @bind-Value="ViewModel.Description"
                                      Variant="Variant.Outlined" />
                    </MudStack>
                </MudStep>
            </MudStepper>

   
        </div>
    </MudPopover>
}

@code {
    private int activeStepIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
