@inject AuthenticationStateProvider AuthState
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All"><span aria-hidden="true"><i class="fa-duotone fa-solid fa-house"></i> Home</span></MudNavLink>
    @if (isAdmin)
    {
        <MudNavLink Href="/admin/roles"><span aria-hidden="true"><i class="fa-solid fa-circle-half-stroke"></i> Roles</span></MudNavLink>
        <MudNavLink Href="/admin/users"><span aria-hidden="true"><i class="fa-solid fa-users"></i> Users</span></MudNavLink>
    }
    <MudNavLink Href="/resume/positions"><span aria-hidden="true"><i class="fa-solid fa-cubes"></i> Positions</span></MudNavLink>
    <MudNavLink Href="/resume/education"><span aria-hidden="true"><i class="fa-solid fa-school"></i> Education</span></MudNavLink>
    <MudNavLink Href="/resume/reccomendations"><span aria-hidden="true"><i class="fa-solid fa-award"></i> Reccomendations</span></MudNavLink>
    <MudNavLink Href="/resume/certificates"><span aria-hidden="true"><i class="fa-solid fa-certificate"></i> Certificates</span></MudNavLink>
    <MudNavLink Href="/resume/publications"><span aria-hidden="true"><i class="fa-solid fa-book-open"></i> Publications</span></MudNavLink>
</MudNavMenu>

@code{
    private bool isAdmin = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User?.IsInRole("Admin") ?? false;
        await base.OnInitializedAsync();
    }
}