@inject AuthenticationStateProvider AuthState

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    @if (isAdmin)
    {
        <MudNavLink Href="admin/roles"><span aria-hidden="true"><i class="fa-solid fa-circle-half-stroke"></i>Roles</span>
        </MudNavLink>
        <MudNavLink Href="admin/users"><span aria-hidden="true"><i class="fa-solid fa-users"></i>Users</span></MudNavLink>
        <MudNavLink Href="admin/documenttypes"><span aria-hidden="true"><i class="fa-solid fa-file-code"></i>Document
                Types</span></MudNavLink>
        <MudNavLink Href="admin/documenttemplates"><span aria-hidden="true"><i class="fa-solid fa-folder-open"></i>Document
                Templates</span></MudNavLink>
        <MudNavLink Href="purchasing/admin"><span aria-hidden="true"><i
                    class="fa-solid fa-cash-register"></i>Purchases</span></MudNavLink>
        <MudNavLink Href="purchasing/packages/manage"><span aria-hidden="true"><i
                class="fa-solid fa-basket-shopping"></i>Packages</span></MudNavLink>
    }
    @if (isAuthenticated && !isRecruiter)
    {

        <MudNavLink Href="recruiters" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.SupervisorAccount">Recruiters
        </MudNavLink>
        <MudNavLink Disabled="!isAuthenticated" Href="recruiters/accept" Match="NavLinkMatch.Prefix"
            Icon="@Icons.Material.Filled.Handshake">Accept
            Recruiters</MudNavLink>
    }
    @if (isRecruiter)
    {
        <MudNavLink Href="recruiters/impersonate"><span aria-hidden="true"><i
                    class="fa-solid fa-user-ninja"></i>Impersonate</span></MudNavLink>
        <MudNavLink Href="recruits"><span aria-hidden="true"><i class="fa-solid fa-users-between-lines"></i>Recruits</span>
    </MudNavLink>
    }

    <MudNavLink Disabled="!isAuthenticated" Href="purchasing" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.Store">Buy
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="purchasing/packages" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.Receipt">My
        Purchases</MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/builder" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.PhotoFilter">Build
        Resume
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/postings" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.PostAdd">Postings
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/profile" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.AccountBox">Profile
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/positions" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.WorkHistory">Positions
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/education" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.School">Education
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/recommendations" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.Recommend">
        Recommendations
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/certificates" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.Verified">
        Certificates
    </MudNavLink>

    <MudNavLink Disabled="!isAuthenticated" Href="resume/publications" Match="NavLinkMatch.Prefix"
        Icon="@Icons.Material.Filled.LocalLibrary">
        Publications
    </MudNavLink>
</MudNavMenu>


@code {
    private bool isAdmin = false;
    private bool isRecruiter = false;
    private bool isAuthenticated = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User?.IsInRole("Admin") ?? false;
        isRecruiter = authState.User?.IsInRole("Recruiter") ?? false;
        isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;
        await base.OnInitializedAsync();
    }
}